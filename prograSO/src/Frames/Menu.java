/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import Controlador.Singleton;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import modelo.Batch;
import modelo.ColaMensajes;
import modelo.ColaProcesos;
import modelo.ConfiguracionSistema;
import modelo.Mensaje;
import modelo.Proceso;

/**
 *
 * @author Rigo-PC
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */

    public Menu() {
        Dimension pantalla = Toolkit.getDefaultToolkit().getScreenSize();
        int height = pantalla.height;
        int width = pantalla.width;
        setSize(width/2, height/2);		
 
        setLocationRelativeTo(null);
        initComponents();
        this.jPanel_create.setVisible(false);
        this.jPanel_receive.setVisible(false);
        this.jPanel_send.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton_create = new javax.swing.JButton();
        jButton_send = new javax.swing.JButton();
        jButton_receive = new javax.swing.JButton();
        jButton_play = new javax.swing.JButton();
        jButton_GuardarDatos = new javax.swing.JButton();
        jPanel_create = new javax.swing.JPanel();
        jButton_ejecutarC = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextField_msgContents = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField_priorityMsg = new javax.swing.JTextField();
        jPanel_send = new javax.swing.JPanel();
        jButton_ejecutarS = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jComboBox_sendDestination = new javax.swing.JComboBox<>();
        jComboBox_sendMsg = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox_proccessSend = new javax.swing.JComboBox<>();
        jPanel_receive = new javax.swing.JPanel();
        jButton_ejecutarR = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jComboBox_receiveSource = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jComboBox_receiveMsg = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jComboBox_proccessReceive = new javax.swing.JComboBox<>();
        jPanel_assocMailbox = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jComboBox_asoccMailbox = new javax.swing.JComboBox<>();
        jButton_assocMailbox = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton_manualUsuario = new javax.swing.JButton();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setSize(new java.awt.Dimension(623, 402));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Proyecto #1 Principio de Sistemas Operativos");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Establecer configuraciones:");

        jButton1.setText("Ajustar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton_create.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_create.setText("Create()");
        jButton_create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_createActionPerformed(evt);
            }
        });

        jButton_send.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_send.setText("Send()");
        jButton_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_sendActionPerformed(evt);
            }
        });

        jButton_receive.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton_receive.setText("Receive()");
        jButton_receive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_receiveActionPerformed(evt);
            }
        });

        jButton_play.setText("Display()");
        jButton_play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_playActionPerformed(evt);
            }
        });

        jButton_GuardarDatos.setText("Batch()");
        jButton_GuardarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GuardarDatosActionPerformed(evt);
            }
        });

        jPanel_create.setPreferredSize(new java.awt.Dimension(407, 180));
        //jPanel_create.setVisible(false);

        jButton_ejecutarC.setText("Ejecutar");
        jButton_ejecutarC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ejecutarCActionPerformed(evt);
            }
        });

        jLabel3.setText("Create()");

        jLabel10.setText("Contenido:");

        jLabel8.setText("Prioridad:");

        javax.swing.GroupLayout jPanel_createLayout = new javax.swing.GroupLayout(jPanel_create);
        jPanel_create.setLayout(jPanel_createLayout);
        jPanel_createLayout.setHorizontalGroup(
            jPanel_createLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField_msgContents, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
            .addGroup(jPanel_createLayout.createSequentialGroup()
                .addGroup(jPanel_createLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_createLayout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jLabel3))
                    .addGroup(jPanel_createLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel10))
                    .addGroup(jPanel_createLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jButton_ejecutarC))
                    .addGroup(jPanel_createLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addGap(29, 29, 29)
                        .addComponent(jTextField_priorityMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel_createLayout.setVerticalGroup(
            jPanel_createLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_createLayout.createSequentialGroup()
                .addComponent(jLabel3)
                .addGap(6, 6, 6)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField_msgContents, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_createLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField_priorityMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButton_ejecutarC)
                .addContainerGap())
        );

        jPanel_send.setVisible(false);

        jButton_ejecutarS.setText("Ejecutar");
        jButton_ejecutarS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ejecutarSActionPerformed(evt);
            }
        });

        jLabel4.setText("Send()");

        jLabel11.setText("Mensaje:");

        jLabel12.setText("Destino:");

        jComboBox_sendDestination.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox_sendMsg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Proceso:");

        jComboBox_proccessSend.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel_sendLayout = new javax.swing.GroupLayout(jPanel_send);
        jPanel_send.setLayout(jPanel_sendLayout);
        jPanel_sendLayout.setHorizontalGroup(
            jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_sendLayout.createSequentialGroup()
                .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_sendLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox_sendDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(16, 16, 16)
                        .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_sendLayout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_sendLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addComponent(jComboBox_sendMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel_sendLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(jButton_ejecutarS))
                    .addGroup(jPanel_sendLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel_sendLayout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(jComboBox_proccessSend, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel_sendLayout.setVerticalGroup(
            jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_sendLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jComboBox_proccessSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_sendLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox_sendDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_sendMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton_ejecutarS))
        );

        jPanel_receive.setRequestFocusEnabled(false);
        jPanel_receive.setVisible(false);

        jButton_ejecutarR.setText("Ejecutar");
        jButton_ejecutarR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ejecutarRActionPerformed(evt);
            }
        });

        jLabel5.setText("Receive()");

        jLabel13.setText("Fuente:");

        jComboBox_receiveSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel14.setText("Mensaje:");

        jComboBox_receiveMsg.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Proceso");

        jComboBox_proccessReceive.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel_receiveLayout = new javax.swing.GroupLayout(jPanel_receive);
        jPanel_receive.setLayout(jPanel_receiveLayout);
        jPanel_receiveLayout.setHorizontalGroup(
            jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_receiveLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addGroup(jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_receiveLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_receiveLayout.createSequentialGroup()
                        .addGap(0, 46, Short.MAX_VALUE)
                        .addGroup(jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_receiveLayout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(jButton_ejecutarR)
                                .addGap(141, 141, 141))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_receiveLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox_proccessReceive, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(113, 113, 113))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_receiveLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addGap(113, 113, 113))))
            .addGroup(jPanel_receiveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox_receiveSource, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox_receiveMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel_receiveLayout.setVerticalGroup(
            jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_receiveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jComboBox_proccessReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_receiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox_receiveMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_receiveSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton_ejecutarR)
                .addContainerGap())
        );

        jLabel14.setVisible(false);
        this.jComboBox_receiveMsg.setVisible(false);

        jLabel9.setText("Proceso:");

        jComboBox_asoccMailbox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton_assocMailbox.setText("Asociar");
        jButton_assocMailbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_assocMailboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_assocMailboxLayout = new javax.swing.GroupLayout(jPanel_assocMailbox);
        jPanel_assocMailbox.setLayout(jPanel_assocMailboxLayout);
        jPanel_assocMailboxLayout.setHorizontalGroup(
            jPanel_assocMailboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_assocMailboxLayout.createSequentialGroup()
                .addGroup(jPanel_assocMailboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_assocMailboxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jComboBox_asoccMailbox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel_assocMailboxLayout.createSequentialGroup()
                        .addGroup(jPanel_assocMailboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_assocMailboxLayout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(jLabel9))
                            .addGroup(jPanel_assocMailboxLayout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jButton_assocMailbox)))
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel_assocMailboxLayout.setVerticalGroup(
            jPanel_assocMailboxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_assocMailboxLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jComboBox_asoccMailbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton_assocMailbox)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setText("AsociarMailbox");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel_assocMailbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addGap(17, 17, 17)
                        .addComponent(jPanel_receive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 71, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton_play, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_receive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_create, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_GuardarDatos)
                        .addGap(47, 47, 47))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(185, 185, 185)
                    .addComponent(jPanel_send, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(65, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(183, 183, 183)
                    .addComponent(jPanel_create, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                    .addGap(43, 43, 43)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButton_create)
                        .addGap(26, 26, 26)
                        .addComponent(jButton_send)
                        .addGap(34, 34, 34)
                        .addComponent(jButton_receive)
                        .addGap(26, 26, 26)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_assocMailbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel_receive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_GuardarDatos)
                    .addComponent(jButton_play))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jPanel_send, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(191, Short.MAX_VALUE)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(jPanel_create, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(183, Short.MAX_VALUE)))
        );

        jPanel_assocMailbox.setVisible(false);

        jButton_manualUsuario.setText("Ayuda Sensitiva al Contexto");
        jButton_manualUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_manualUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton_manualUsuario)
                                .addGap(37, 37, 37)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1)
                    .addComponent(jButton_manualUsuario))
                .addGap(12, 12, 12)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Settings settings = new Settings();
        settings.show();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public void mensajeDialog(String mensaje, String tituloBarra){
        
        JOptionPane.showMessageDialog(null, mensaje, tituloBarra, JOptionPane.INFORMATION_MESSAGE);
    }
    private void jButton_createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_createActionPerformed
        // TODO add your handling code here:
        
        
        // Validar Configuracion
        ConfiguracionSistema configuracion = Singleton.getInstance().getControlador().getConfiguracionSistema();
        if(configuracion == null){
            String mensajeError = "Se debe establecer la configuración para crear un mensaje";
            String tituloDeBarra = "Falta Configuración";
            this.mensajeDialog(mensajeError, tituloDeBarra);
            return;
        }
        
        // Configuracion Correcta
        jPanel_create.setVisible(true);
        jPanel_send.setVisible(false);
        jPanel_receive.setVisible(false);

        // Opciones de tipo de Mensaje
        
        // Opciones de Source y Destination
        ColaProcesos colaProceso = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProceso.getListaProcesos();

        String identificadorProceso=  "" ;
        
        for(Proceso proceso: listaProcesos){
            
            identificadorProceso = String.valueOf(proceso.getIdentificador());
            
        }

        
        
        
    }//GEN-LAST:event_jButton_createActionPerformed

    private void jButton_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_sendActionPerformed
        // TODO add your handling code here:
        
        
        // Validar Configuracion
        ConfiguracionSistema configuracion = Singleton.getInstance().getControlador().getConfiguracionSistema();
        if(configuracion == null){
            String mensajeError = "Se debe establecer la configuración para enviar un mensaje";
            String tituloDeBarra = "Falta Configuración";
            this.mensajeDialog(mensajeError, tituloDeBarra);
            return;
        }
        
        jPanel_send.setVisible(true);
        jPanel_create.setVisible(false);
        jPanel_receive.setVisible(false);

        // Opciones decre sendDestination
        
        boolean direccionamientoDirecto = Singleton.getInstance().
                getControlador().getConfiguracionSistema().
                getDireccionamiento().isDirect();
        
        
        // Direct Send
        if(direccionamientoDirecto){
            cargarComboxProcesosSend();
            cargarComboxBoxProcesosSend();
            cargarComboxMensajesSend();
        }
        else{
            cargarComboxBoxProcesosSend();
            cargarComboxMensajesSendIndirect();
            this.jComboBox_sendDestination.setVisible(false);
        }
    }//GEN-LAST:event_jButton_sendActionPerformed
    
    public void cargarComboxProcesosSend(){
        ColaProcesos colaProceso = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProceso.getListaProcesos();
        String identificadorProceso;
        this.jComboBox_sendDestination.removeAllItems();
        for(Proceso proceso : listaProcesos){
            //if(!proceso.isUso()){
                identificadorProceso = String.valueOf(proceso.getIdentificador());
                this.jComboBox_sendDestination.addItem(identificadorProceso);
            //}
        }
    }
    
    public void cargarComboxBoxProcesosSend(){
        ColaProcesos colaProcesos = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProcesos.getListaProcesos();
        String identificadorProceso;
        this.jComboBox_proccessSend.removeAllItems();
        for(Proceso proceso : listaProcesos){
            if(!proceso.isUso()){
                identificadorProceso = String.valueOf(proceso.getIdentificador());
                this.jComboBox_proccessSend.addItem(identificadorProceso);
            }
        }
    }
    
    public void cargarComboxMensajesSend(){
        // Opciones de Mensaje
        ColaMensajes colaMensajes = Singleton.getInstance().getControlador().getColaMensajes();
        ArrayList<Mensaje> listaMensajes = colaMensajes.getListaMensajes();
        String contenidoMensaje;
        
        this.jComboBox_sendMsg.removeAllItems();
        for(Mensaje mensaje: listaMensajes){
            contenidoMensaje = (String)mensaje.getContenido();
            if(mensaje.getDestino()==-1){
                //String contenido = contenidoMensaje.replace('_', ' ');
                //System.out.println(contenido);
                this.jComboBox_sendMsg.addItem(contenidoMensaje);
            }
        }
    }
    
    public void cargarComboxMensajesSendIndirect(){
        // Opciones de Mensaje
        ColaMensajes colaMensajes = Singleton.getInstance().getControlador().getColaMensajes();
        ArrayList<Mensaje> listaMensajes = colaMensajes.getListaMensajes();
        String contenidoMensaje;
        
        this.jComboBox_sendMsg.removeAllItems();
        for(Mensaje mensaje: listaMensajes){
            contenidoMensaje = (String)mensaje.getContenido();
            if(mensaje.getFuente()==-1){
                //String contenido = contenidoMensaje.replace('_', ' ');
                //System.out.println(contenido);
                this.jComboBox_sendMsg.addItem(contenidoMensaje);
            }
        }
    }
    
    private void jButton_receiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_receiveActionPerformed
        // TODO add your handling code here:
        
        // Validar Configuracion
        ConfiguracionSistema configuracion = Singleton.getInstance().getControlador().getConfiguracionSistema();
        if(configuracion == null){
            String mensajeError = "Se debe establecer la configuración para recibir un mensaje";
            String tituloDeBarra = "Falta Configuración";
            this.mensajeDialog(mensajeError, tituloDeBarra);
            return;
        }
        
        jPanel_receive.setVisible(true);
        jPanel_create.setVisible(false);
        jPanel_send.setVisible(false);
        
        
        
        boolean direccionamientoDirecto = Singleton.getInstance().
                getControlador().getConfiguracionSistema().
                getDireccionamiento().isDirect();
        
        
        // Direct Receive
        if(direccionamientoDirecto){
            boolean receiveDirectExplicit = Singleton.getInstance().getControlador().isReceiveExplicit();
            if(receiveDirectExplicit){
                cargarComboBoxProcesosReceiveExplicito();
            }else{
                this.jComboBox_receiveSource.setVisible(false);
                cargarComboBoxProcesosReceiveImplicito();
            }
            cargarComboBoxMensajesReceive();

        }else{   
            // Opciones de Mensaje
            ColaMensajes colaMensajes = Singleton.getInstance().getControlador().getColaMensajes();
            ArrayList<Mensaje> listaMensajes = colaMensajes.getListaMensajes();
            String contenidoMensaje;

            this.jComboBox_receiveMsg.removeAllItems();
            for(Mensaje mensaje: listaMensajes){
                contenidoMensaje = (String)mensaje.getContenido();
                this.jComboBox_receiveMsg.addItem(contenidoMensaje);
            }
            this.jComboBox_receiveSource.setVisible(false);
            this.jComboBox_receiveMsg.setVisible(false);
            cargarComboBoxProcesosReceiveExplicito();
        }
  
    }//GEN-LAST:event_jButton_receiveActionPerformed
     
    public void cargarComboBoxProcesosReceiveExplicito(){
        ColaProcesos colaProceso = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProceso.getListaProcesos();
        String identificadorProceso;
        this.jComboBox_receiveSource.removeAllItems();
        this.jComboBox_proccessReceive.removeAllItems();
        for(Proceso proceso : listaProcesos){
            identificadorProceso = String.valueOf(proceso.getIdentificador());
            if(!proceso.isUso()){
                this.jComboBox_proccessReceive.addItem(identificadorProceso);
            }
            this.jComboBox_receiveSource.addItem(identificadorProceso);
        }
    }
    
    public void cargarComboBoxProcesosReceiveImplicito(){
        ColaProcesos colaProceso = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProceso.getListaProcesos();
        String identificadorProceso;
        this.jComboBox_receiveSource.removeAllItems();
        this.jComboBox_proccessReceive.removeAllItems();
        for(Proceso proceso : listaProcesos){
            identificadorProceso = String.valueOf(proceso.getIdentificador());
            if(!proceso.isUso()){
                this.jComboBox_proccessReceive.addItem(identificadorProceso);
            }
            //this.jComboBox_receiveSource.addItem(identificadorProceso);
        }
    }
    
    public void cargarComboBoxMensajesReceive(){
        // Opciones de Mensaje
        ColaMensajes colaMensajes = Singleton.getInstance().getControlador().getColaMensajes();
        ArrayList<Mensaje> listaMensajes = colaMensajes.getListaMensajes();
        String contenidoMensaje;

        this.jComboBox_receiveMsg.removeAllItems();
        for(Mensaje mensaje: listaMensajes){
            contenidoMensaje = (String)mensaje.getContenido();
            if(mensaje.getFuente()==-1){
                //String contenido = contenidoMensaje.replaceAll("_"," ");
                this.jComboBox_receiveMsg.addItem(contenidoMensaje);
            }
        }
    }
    
    public void cargarComboBoxProcesosMailbox(){
        ColaProcesos colaProceso = Singleton.getInstance().getControlador().getColaProcesos();
        ArrayList<Proceso> listaProcesos = colaProceso.getListaProcesos();
        String identificadorProceso;
        this.jComboBox_asoccMailbox.removeAllItems();
        for(Proceso proceso : listaProcesos){
            identificadorProceso = String.valueOf(proceso.getIdentificador());
            if(!proceso.isUso()){
                this.jComboBox_asoccMailbox.addItem(identificadorProceso);
            }
            //this.jComboBox_receiveSource.addItem(identificadorProceso);
        }
    }
    
    private void jButton_ejecutarCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ejecutarCActionPerformed
        // TODO add your handling code here:
        
        
        
        String contenido = this.jTextField_msgContents.getText();
        String prioridadString = this.jTextField_priorityMsg.getText();
        if(contenido.equals("")){
            mensajeDialog("Escriba un mensaje", "Mensaje vació");
        }else if(prioridadString.equals("")){
            mensajeDialog("Prioridad vacía", "Complete la prioridad");
        }
        else{
            Mensaje msg = Singleton.getInstance().getControlador().encontrarMensaje(contenido);
            if(msg!=null){
                mensajeDialog("Existe un mensaje identico","Mensaje identico");
                }else{
                int largoMensaje = contenido.length();
                int largoMaximo = Singleton.getInstance().getControlador().getConfiguracionSistema().getFormato().getTamano();


                if(Singleton.getInstance().getControlador().getConfiguracionSistema().getFormato().getLargo().equals("Largo Fijo")){
                    if(largoMensaje > largoMaximo){

                        String mensajeDialog = "El tamaño del mensaje es mayor que el permitido";
                        String tituloBarra = "Tamano no permitido";
                        this.mensajeDialog(mensajeDialog, tituloBarra);
                        return;
                    }
                    int faltantes = largoMaximo-largoMensaje;
                    for(int i=0;i<faltantes;i++){
                        contenido+="_";
                    }
                }
                
                int prioridad = Integer.parseInt(prioridadString);
                //Comando Create
                boolean estado = Singleton.getInstance().getControlador().Create(contenido,prioridad);

                if(estado){
                    String mensajeDialogoContenido = "Se ha creado el mensaje";
                    String tituloDialogoContenido = "Mensaje creado";
                    this.jTextField_msgContents.setText("");
                    this.jTextField_priorityMsg.setText("");
                    this.mensajeDialog(mensajeDialogoContenido ,tituloDialogoContenido);
                }else{
                    String mensajeDialogoContenido = "No se ha creado el mensaje";
                    String tituloDialogoContenido = "Mensaje no creado";
                    this.mensajeDialog(mensajeDialogoContenido ,tituloDialogoContenido);
                }
            }
            
        }

        
        
        //Singleton.getInstance().getControlador().getColaMensajes().ImprimirColaMensaje();
        
        
        
        
        
    }//GEN-LAST:event_jButton_ejecutarCActionPerformed

    private void jButton_ejecutarSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ejecutarSActionPerformed
        // TODO add your handling code here:
        
        
        String idProcesoDestinoString = (String) this.jComboBox_sendDestination.getSelectedItem();
        int idProcesoDestino;
        if(idProcesoDestinoString.equals("Item 1")){
            idProcesoDestino=-1;
        }else{
            idProcesoDestino = Integer.parseInt(idProcesoDestinoString);
        }
        
        String idProcesoSendString = (String) this.jComboBox_proccessSend.getSelectedItem();
        int idProcesoSend = Integer.parseInt(idProcesoSendString);

        
        if(idProcesoDestino!=idProcesoSend){
            String contenidoMensaje = (String)this.jComboBox_sendMsg.getSelectedItem();
        
            boolean send = Singleton.getInstance().getControlador().Send(idProcesoSend,idProcesoDestino, contenidoMensaje);

            String contenidoMensajeDialog = "Se ha enviado el mensaje";
            String tituloBarra = "Send";

            if(send){
                //String var = "El proceso: "+String.valueOf(idProcesoSend)+" pudo enviar el mensaje: "+contenidoMensaje;
                //Singleton.getInstance().getControlador().getColaProcesos().agregarEventoProceso(idProcesoSend,var);
                contenidoMensajeDialog = "Se ha enviado el mensaje";
                this.mensajeDialog(contenidoMensajeDialog, tituloBarra);

            }
            else{
                //String var = "El proceso: "+String.valueOf(idProcesoDestino)+" no pudo recibir el mensaje: "+contenidoMensaje;
                //Singleton.getInstance().getControlador().getColaProcesos().agregarEventoProceso(idProcesoDestino,var);
                contenidoMensajeDialog = "El mensaje no se pudo enviar";
                this.mensajeDialog(contenidoMensajeDialog, tituloBarra);
            }
            
            boolean direccionamientoDirecto = Singleton.getInstance().
                getControlador().getConfiguracionSistema().
                getDireccionamiento().isDirect();
        
        
            // Direct Send
            if(direccionamientoDirecto){
                cargarComboxProcesosSend();
                cargarComboxBoxProcesosSend();
                cargarComboxMensajesSend();
            }
            else{
                cargarComboxBoxProcesosSend();
                cargarComboxMensajesSendIndirect();
                this.jComboBox_sendDestination.setVisible(false);
            }
        }else{
            this.mensajeDialog("Se esta realizando un envio al mismo proceso", "Error:");
        }
        
    }//GEN-LAST:event_jButton_ejecutarSActionPerformed

    private void jButton_ejecutarRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ejecutarRActionPerformed
        // TODO add your handling code here:    

        String idProcesoReceiveString = (String) this.jComboBox_proccessReceive.getSelectedItem();
        int idProcesoReceive = Integer.parseInt(idProcesoReceiveString);
        
        boolean receive = false;
        
        boolean receiveDirectExplicit = Singleton.getInstance().getControlador().isReceiveExplicit();
        if(receiveDirectExplicit){
            String idProcesoFuenteString = (String)this.jComboBox_receiveSource.getSelectedItem();
            int idProcesoFuente = Integer.parseInt(idProcesoFuenteString);
            receive = Singleton.getInstance().getControlador().Receive(idProcesoReceive,idProcesoFuente);
        }else{
            this.jComboBox_receiveSource.setVisible(false);
            cargarComboBoxProcesosReceiveImplicito();
            receive = Singleton.getInstance().getControlador().Receive(idProcesoReceive,0);
        }

        String contenidoMensajeDialog = "";
        String tituloBarra = "Receive";
        
        if(receive){
            contenidoMensajeDialog = "Receive procesado";
            this.mensajeDialog(contenidoMensajeDialog, tituloBarra);
            
        }
        else{
            
            contenidoMensajeDialog = "Receive no procesado";
            this.mensajeDialog(contenidoMensajeDialog, tituloBarra);
        }
        
        cargarComboBoxMensajesReceive();
        cargarComboBoxProcesosReceiveExplicito();
    }//GEN-LAST:event_jButton_ejecutarRActionPerformed

    private void jButton_manualUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_manualUsuarioActionPerformed
        // TODO add your handling code here:
        
       
        /*
      try {
            if ((new File("ManualUsuario.pdf")).exists()) {
                Process p = Runtime.getRuntime()
         .exec("rundll32 url.dll,FileProtocolHandler ManualUsuario.pdf");
      p.waitFor();
            } else {
                System.out.println("Archivo no existe");
            }
            System.out.println("Listo");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        */
      
      
      String ayudaSensitiva = "";
      
      
      String contenidoMensaje = Singleton.getInstance().getControlador().getConfiguracionSistema().getFormato().getContenido();
      String largoMensaje =  Singleton.getInstance().getControlador().getConfiguracionSistema().getFormato().getLargo();
      String direccionamiento = Singleton.getInstance().getControlador().getConfiguracionSistema().getDireccionamiento().getTipoDireccionamiento();
      String manejoCola =  Singleton.getInstance().getControlador().getConfiguracionSistema().getManejoColas().getTipo();
      String syncSend =  Singleton.getInstance().getControlador().getConfiguracionSistema().getSincronizacion().getSend();
      String syncReceive =  Singleton.getInstance().getControlador().getConfiguracionSistema().getSincronizacion().getReceive();
      int largo = Singleton.getInstance().getControlador().getConfiguracionSistema().getFormato().getTamano();

      
      
      ayudaSensitiva = "El contenido de los mensajes creados será de tipo: " + contenidoMensaje + "\n" ;
      
      if(largoMensaje.equals("Largo Fijo")){
          
          ayudaSensitiva += "El largo fijo de los mensajes indica que no posible crear mensajes que sobrepasen el tamaño establecido" + "\n";
          ayudaSensitiva += "El tamaño de los mensajes es de " + String.valueOf(largo) + " bytes" + "\n";
          
      }
      else{
           ayudaSensitiva += "El largo variable de los mensajes indica que no existe un tamaño limite en bytes para los mensajes" + "\n";
      }
          
          
      switch(direccionamiento){
          
          case("DirectoReceive Explícito"):{
              
               ayudaSensitiva += "El direccionamiento directo establece una comunicación  directa entre procesos. "
                  + "Comandos send específican cual proceso recibirá el mensaje" + "\n"
                  + "Receive explícito establece que el comando 'receive' especifica de que proceso es recibido el mensaje" + "\n";
               
                break;
          }
          case("DirectoReceive Implícito"):{
              
              ayudaSensitiva += "El direccionamiento directo establece una comunicación  directa entre procesos. "
                  + "Comandos send específican cual proceso recibirá el mensaje" + "\n"
                  + " Receive implícito establece que el comando receive no especifique de que proceso es recibido el mensaje" + "\n";
              
              break;
          }
          case("IndirectoEstático"):{
              
              ayudaSensitiva += "El direccionamiento indirecto establece una comunicación entre procesos a través de un mailbox. "
                  + " Indirecto Estático establece que el mailbox es reservado por un solo proceso, todo el contenido del mailbox pasa a ser de un único proceso" + "\n";
              
          }
          case("IndirectoDinámico"):{
              
              ayudaSensitiva += "El direccionamiento indirecto establece una comunicación entre procesos a través de un mailbox. "
                  + " Indirecto Dinámico establece que el mailbox no es reservador por ningún proceso, todos los procesos pueden recibir mensajes" + "\n";
              
              
              
              
          }
      }
      
      // Sync
      
      if(syncSend.equals("Blocking")){
          
          ayudaSensitiva += "Sincronización send blocking establece que el proceso que envió el mensaje queda bloqueado hasta " + "\n" + 
                  " que reciba una notificación de que el mensaje que envió fue recibido" + "\n" ; 
      }
      else{
          
           ayudaSensitiva += "Sincronización send Non blocking establece que el proceso no se queda esperando una confirmación " + "\n" ;
                  
          
      }
      
      if(syncReceive.equals("Blocking")){
          
          ayudaSensitiva += "Sincronización receive blocking establece que el proceso  se queda bloqueado sino hay mensajes para el" + "\n" ;
                  
          
      }
      else if(syncReceive.equals("NonBlocking")){
          
          ayudaSensitiva += "Sincronización receive non blocking establece que el proceso que recibe un mensaje no se queda bloqueado" + "\n" ;
                  
      }
      else{
          
          ayudaSensitiva += "Sincronización receive Prueba de llegada establece que el proceso se queda preguntando constantemente si existen mensajes para el" + "\n" ;
                  
      }
      
      // Disciplina de manejo
      
      if(manejoCola.equals("FIFO")){
          
          ayudaSensitiva += "La disciplina de manejo de colas FIFO establece que el primer mensaje agregado a la cola es el primero en ser enviado" + "\n";
          
      }
      else{
          ayudaSensitiva += "La disciplina de manejo de colas por Prioridad establece que el mensaje con la mayor prioridad es el mensaje que se envia" + "\n";
      }
      
    
      this.mensajeDialog(ayudaSensitiva, "Ayuda Sensitiva");
      
      
    }//GEN-LAST:event_jButton_manualUsuarioActionPerformed

    private void jButton_GuardarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GuardarDatosActionPerformed
        // TODO add your handling code here:
        
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
		// int returnValue = jfc.showSaveDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = jfc.getSelectedFile();
            Batch batch = new Batch();
            
            try {
                batch.leerArchivo(selectedFile);
                this.mensajeDialog("Configuracion Lista", "Configuracion");
            } catch (IOException ex) {
                this.mensajeDialog("El archivo no puedo ser leido", "Error en el archivo");
                Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            System.out.println(selectedFile.getAbsolutePath());
        }
                
                

       // System.out.println(Singleton.getInstance().getControlador().determinarPrioridadMensajes());
        //System.out.println(""+Singleton.getInstance().getControlador().getListaSolicitudes().getListaSolicitudes().toString());
    }//GEN-LAST:event_jButton_GuardarDatosActionPerformed

    private void jButton_playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_playActionPerformed
        // TODO add your handling code here:
        
        
        if(Singleton.getInstance().getControlador().getColaProcesos() == null){
            this.mensajeDialog("Falta Configuracion", "Falta Configuracion");
        }
        else{
            Display display = new Display();
            display.show();
            
        }
        
    }//GEN-LAST:event_jButton_playActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        // Validar Configuracion
        ConfiguracionSistema configuracion = Singleton.getInstance().getControlador().getConfiguracionSistema();
        if(configuracion == null){
            String mensajeError = "Se debe establecer la configuración para enviar un mensaje";
            String tituloDeBarra = "Falta Configuración";
            this.mensajeDialog(mensajeError, tituloDeBarra);
            return;
        }
        
        String valor = Singleton.getInstance().getControlador().getConfiguracionSistema().getDireccionamiento().getTipoDireccionamiento();
        if(valor.equals("IndirectoEstático")){
            this.jPanel_assocMailbox.setVisible(true);
            cargarComboBoxProcesosMailbox();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton_assocMailboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_assocMailboxActionPerformed
        // TODO add your handling code here:
        String val = (String) this.jComboBox_asoccMailbox.getSelectedItem();
        if(!val.equals("")){
            int proceso = Integer.parseInt(val);
            Singleton.getInstance().getControlador().cambiarAsociacionMailbox(proceso);
            this.jPanel_assocMailbox.setVisible(false);
            String var = "El proceso: "+String.valueOf(proceso)+" fue asociado al mailbox.";
                Singleton.getInstance().getControlador().getColaProcesos().agregarEventoProceso(proceso,var);
            this.mensajeDialog("El proceso Mailbox fue asociado al proceso: "+val, "Asociación Correcta");
        }
    }//GEN-LAST:event_jButton_assocMailboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton_GuardarDatos;
    private javax.swing.JButton jButton_assocMailbox;
    private javax.swing.JButton jButton_create;
    private javax.swing.JButton jButton_ejecutarC;
    private javax.swing.JButton jButton_ejecutarR;
    private javax.swing.JButton jButton_ejecutarS;
    private javax.swing.JButton jButton_manualUsuario;
    private javax.swing.JButton jButton_play;
    private javax.swing.JButton jButton_receive;
    private javax.swing.JButton jButton_send;
    private javax.swing.JComboBox<String> jComboBox_asoccMailbox;
    private javax.swing.JComboBox<String> jComboBox_proccessReceive;
    private javax.swing.JComboBox<String> jComboBox_proccessSend;
    private javax.swing.JComboBox<String> jComboBox_receiveMsg;
    private javax.swing.JComboBox<String> jComboBox_receiveSource;
    private javax.swing.JComboBox<String> jComboBox_sendDestination;
    private javax.swing.JComboBox<String> jComboBox_sendMsg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_assocMailbox;
    private javax.swing.JPanel jPanel_create;
    private javax.swing.JPanel jPanel_receive;
    private javax.swing.JPanel jPanel_send;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JTextField jTextField_msgContents;
    private javax.swing.JTextField jTextField_priorityMsg;
    // End of variables declaration//GEN-END:variables
}
